{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Statistics Assignment-2.ipynb",
      "provenance": [],
      "collapsed_sections": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/ussalbt/Assignment/blob/main/Statistics_Assignment_2%20phyton%20%C3%B6devi\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "K7S4cEyZLTp7"
      },
      "source": [
        "## Descriptive Statistics"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "CCZJzVnVT8bw"
      },
      "source": [
        ""
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "vZRYVyc8H7hi"
      },
      "source": [
        " Import **NumPy**, **SciPy**, and **Pandas**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "7ShN0klrHIk3"
      },
      "source": [
        "import numpy as np\n",
        "import pandas as pd\n",
        "from scipy import stats\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns"
      ],
      "execution_count": 1,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "_SaQURIqIA6d"
      },
      "source": [
        " Randomly generate 1,000 samples from the normal distribution using `np.random.normal()`(mean = 100, standard deviation = 15)"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Jyw_FMX0IRkm",
        "outputId": "db72ab30-edfe-4e82-9fd2-ece4c3239336",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "#samples = np.random.normal( mean,std.dev,samplesize)Ã¶rnekler olacak \n",
        "samples = np.random.normal(100,15,1000)\n",
        "samples"
      ],
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([ 85.44325872, 122.64763131, 104.743503  ,  91.32730597,\n",
              "        77.81700001, 107.50207008,  93.31869875,  78.64856302,\n",
              "        96.10315231,  98.91089936,  90.40661405, 106.25767955,\n",
              "       107.35691786, 102.2165715 , 113.78559192,  95.12126051,\n",
              "        97.59979574,  86.30755043, 100.92785416,  82.98742762,\n",
              "       117.57792826,  65.36530434, 119.0936862 , 102.85298072,\n",
              "        92.27315712,  99.98520269,  87.60452923,  70.17567981,\n",
              "        89.07263466, 124.29567467,  88.13587915, 109.94575506,\n",
              "        92.01264515,  83.38324319, 104.60892723, 106.88254581,\n",
              "        97.89034966,  92.53115879, 109.43405558, 108.90495249,\n",
              "        87.69635016, 116.36368461,  96.45338915, 100.42874134,\n",
              "       130.78692313, 100.84883076, 116.11096428, 100.34031121,\n",
              "        73.15640415, 110.16767643, 112.86009666, 106.54600052,\n",
              "        79.81060711, 104.30776766,  80.47887508,  88.84810588,\n",
              "        92.14796123, 108.02651181,  86.11433747,  86.96059352,\n",
              "       121.1084095 ,  97.92150451, 115.98092345,  97.7840641 ,\n",
              "       102.37758347,  90.59966344,  73.57243274,  85.32603147,\n",
              "        98.93901475, 121.0543009 ,  83.00922669,  87.44339447,\n",
              "       110.78021788,  89.32980241,  75.43868717, 115.79073071,\n",
              "        88.5228889 ,  97.57312036, 110.61655553,  74.97624652,\n",
              "       108.66581275, 100.03568265, 107.31031623, 130.91354062,\n",
              "        96.19365554, 126.35045612,  79.73235355,  94.94911781,\n",
              "        96.18165231, 108.45772679,  85.68425629,  91.93349635,\n",
              "        87.43189996, 113.96836343,  87.65483017, 100.13858999,\n",
              "        99.47165259,  95.27544533, 114.69035919, 101.48579144,\n",
              "        95.31303418, 102.14490719, 103.4741962 ,  96.72623052,\n",
              "        70.50431945,  92.02411969, 126.9026873 ,  89.68537559,\n",
              "       111.74131076,  83.69783584,  88.69616415, 101.60287734,\n",
              "       120.29255618, 131.56278252,  66.85877021, 118.71258038,\n",
              "       111.36210212,  94.14275023, 100.04538934, 115.2844695 ,\n",
              "        99.15518702, 100.65507188,  99.23182172,  89.87212997,\n",
              "        92.19639097, 112.24725777,  95.16046068,  90.80715042,\n",
              "        82.76054874,  99.18216167, 107.83840023,  72.73479861,\n",
              "        65.55953293, 100.80461362, 117.51133603,  90.24581604,\n",
              "       105.30716658, 102.08900827,  69.53309888,  72.1433323 ,\n",
              "        92.49914725, 109.88654677, 107.5743476 ,  85.35304777,\n",
              "        91.49747292,  88.06493479, 107.30994338,  92.6729134 ,\n",
              "       105.87376518,  86.69443079, 119.85618545, 113.24507544,\n",
              "        92.31465423,  88.11512978, 127.25015606, 109.40624535,\n",
              "       112.79909534,  89.2590156 ,  94.29572799,  63.72636049,\n",
              "        88.66626331,  86.29716866, 109.85288785, 121.94709848,\n",
              "        92.96254483, 101.62465374, 113.57097764, 117.94056364,\n",
              "        95.98255265,  59.19248127, 122.98685489,  93.34119362,\n",
              "        82.93714351, 113.65768872, 108.28112976, 122.99771968,\n",
              "        94.56808689, 110.16829105, 102.8401446 ,  96.13882233,\n",
              "        94.60268295,  94.27242848,  89.65003172,  76.96693329,\n",
              "        85.02421723, 102.50385179,  97.04113947, 144.25019078,\n",
              "        75.42500134,  88.26063126, 118.58207472, 101.18021138,\n",
              "        89.8787574 , 114.37993257,  84.24559678, 119.30045787,\n",
              "       101.30810132, 100.87035394,  93.53423033, 107.20191848,\n",
              "       107.50747039,  90.39626059, 113.95307371, 106.98481762,\n",
              "        89.5104024 , 101.57546133, 115.93875411, 128.45210353,\n",
              "       111.81597066, 107.41884072, 100.84265504, 123.91035854,\n",
              "       128.83511687, 105.38768325, 107.68912408, 110.22828133,\n",
              "        93.49130997, 119.57011635, 107.6738854 , 103.36949957,\n",
              "        89.84645901,  83.94417572,  64.11923924, 103.76270404,\n",
              "       100.49074568, 109.66658687,  98.54397415, 112.73781832,\n",
              "       101.15172354,  88.0610595 , 110.89553671, 109.60408046,\n",
              "        78.37265707, 117.78900064, 113.85970328, 109.60066304,\n",
              "        96.26123651, 123.84042578,  80.14546442, 105.91202642,\n",
              "       133.7597255 , 112.67254521, 115.59819822,  74.23748859,\n",
              "        86.75271758,  70.93221065, 115.05908512, 107.77727503,\n",
              "       101.25922558,  89.34144949,  67.01621204, 114.29045325,\n",
              "       104.23862778,  64.67859624, 121.36466245,  83.52476347,\n",
              "       111.41316927, 127.81089365, 117.6969147 ,  95.06896733,\n",
              "       104.84168534, 116.32836977,  85.45334505, 104.10040556,\n",
              "        79.98016171,  90.55399676, 104.04527747, 105.09984259,\n",
              "       103.08246147, 104.91297865, 104.01908908, 100.29149115,\n",
              "        78.20079217, 101.18410329,  90.37104625, 100.15610626,\n",
              "       103.79422301,  89.70700623, 111.95939805,  96.0425114 ,\n",
              "       114.64485011,  93.88008877,  89.89175344, 127.25156463,\n",
              "        97.61937788,  82.87945826, 104.81847335,  96.25386844,\n",
              "       103.35081778, 114.0211636 ,  83.09954192,  80.32479133,\n",
              "       106.0521314 , 101.09591845,  92.58940101,  74.16387146,\n",
              "        92.38198599,  93.00270369, 102.22186004,  95.09937413,\n",
              "       107.47557988,  85.09001936,  86.01887257, 140.38962161,\n",
              "       108.49233293,  69.81190426, 103.93927039, 114.61092482,\n",
              "        66.81793437,  95.11394889, 131.27727045,  92.07856601,\n",
              "        87.33809972,  77.17838025,  92.99210907, 101.1909917 ,\n",
              "       115.02190498, 113.29689474,  86.91287963, 116.14776299,\n",
              "        88.8054074 , 121.50614687,  89.08338591, 119.13699756,\n",
              "        90.17697536, 119.80448249, 104.12436531, 104.85654745,\n",
              "       137.94404467,  98.67970228,  81.84497109, 100.31690837,\n",
              "        76.28386328, 107.84137893,  80.51473801,  94.16527113,\n",
              "       109.77427815, 105.76790287,  88.9969081 ,  94.00804007,\n",
              "        69.24576309, 110.29475382, 105.04065066, 123.81554624,\n",
              "       102.93860858,  90.08347149, 115.95193236, 132.08892711,\n",
              "       119.19189183,  63.23490731, 103.45175337, 110.44146615,\n",
              "        87.24865426, 103.98602414,  99.55257393,  99.67289402,\n",
              "       115.25437296, 112.14314504, 131.78361106,  90.43740383,\n",
              "       109.26938062,  78.40184848,  99.76681817, 112.92847175,\n",
              "        92.98825193, 119.67453458, 105.4398165 , 111.79726581,\n",
              "        90.01352777,  78.50523994, 113.67458309,  95.85135823,\n",
              "       100.02655789, 100.09010815,  94.29770147,  97.34543424,\n",
              "       103.05969573, 106.66148449,  90.29997591,  93.09015268,\n",
              "       115.36377253, 129.05083202, 111.41673724,  88.84741028,\n",
              "       120.92544861,  95.52352862, 110.86926899, 100.44286752,\n",
              "       111.33163015,  99.20013513,  95.63639602, 107.07610003,\n",
              "        68.21472943,  72.84437747,  95.02539037,  87.3148416 ,\n",
              "        55.93901267,  73.83450671,  83.5698887 ,  92.48180738,\n",
              "        85.68911152,  97.29505028, 125.33166997,  90.67085632,\n",
              "       120.97364115, 103.69773153, 128.44112687, 104.72245886,\n",
              "        89.53558361,  96.38491324,  85.4594278 , 109.48578087,\n",
              "        86.36385513, 107.43911609, 114.65318154,  99.0354438 ,\n",
              "        82.10810334, 101.76657859, 107.17081273, 106.97412054,\n",
              "       114.21899102, 123.54750241, 127.65083244,  99.73012069,\n",
              "       104.0112359 ,  96.07544983, 100.84407409,  91.02428724,\n",
              "        99.15313239, 106.55990267,  92.79929998, 103.56873528,\n",
              "       115.82304658, 106.66018778, 105.25775856, 109.4763072 ,\n",
              "       106.61684665,  96.92207187, 114.02155542,  98.28363442,\n",
              "       104.28996742, 100.36049799, 115.57139717,  91.25527042,\n",
              "       128.91829882, 101.24001633, 101.59671646,  87.18121286,\n",
              "       108.27652581, 113.0749779 , 111.1871169 , 104.21915065,\n",
              "        83.11319762, 121.4104173 , 110.36413368, 115.83404301,\n",
              "        88.00565838,  92.11608569,  76.38407172, 121.05616778,\n",
              "        76.02628657, 119.42764328, 117.32656483, 113.83794287,\n",
              "        82.88823039, 121.847311  ,  97.48389984,  99.85658867,\n",
              "       137.55616301, 106.10389484, 113.10379005,  97.58651727,\n",
              "        93.09704198,  86.21916268, 112.56882962,  85.20068534,\n",
              "       106.58041253,  84.17183413, 109.15391447, 128.08152824,\n",
              "       110.47668549, 123.63951898, 109.69986004, 118.46304803,\n",
              "       110.4107886 , 102.04117762,  94.94793814,  76.6575425 ,\n",
              "       100.10639414,  94.74878409,  86.50361967,  95.21534324,\n",
              "       120.03821072,  87.89210605,  85.61748551,  86.17372481,\n",
              "        86.97661953, 111.66499329, 103.49484264, 121.18665281,\n",
              "        80.49829899, 122.98057951, 112.82965029, 114.0575765 ,\n",
              "        97.42472899, 105.283092  , 100.9894435 , 111.19631601,\n",
              "       108.15710678,  99.84783344,  98.69964636,  85.80330082,\n",
              "       103.48375503, 115.43462943,  87.27112612, 106.14847807,\n",
              "       124.68357251, 103.3771843 , 111.65514258, 102.35202076,\n",
              "        86.88045827,  67.42421156, 104.73303732, 117.44772421,\n",
              "        93.92498441,  89.52965792,  86.77626   , 101.49204254,\n",
              "        58.57224307, 105.97075361, 108.37341181, 106.05071292,\n",
              "       117.02491466, 104.18802133,  71.84718931,  84.7683891 ,\n",
              "        96.20507172, 100.78848099, 113.23966712, 119.88211144,\n",
              "       107.43734848,  97.70048962,  95.8416254 ,  91.90131776,\n",
              "       104.89858051, 106.2241285 , 104.63850199,  77.11488292,\n",
              "       125.60634724,  90.97547336,  89.94694505,  84.66832821,\n",
              "        87.4474376 , 116.20694766,  85.83619483,  76.59912793,\n",
              "       101.00004426, 114.01965762, 108.28955367, 116.79933979,\n",
              "        85.46912633,  97.20718697, 114.84958318,  76.61573311,\n",
              "        99.91976512, 114.68087992, 101.10821416, 134.40132153,\n",
              "       102.73096631,  66.08048417,  92.10444102,  83.69415257,\n",
              "        90.98631848,  73.13263034, 109.45040445,  92.53918162,\n",
              "       104.45654267, 115.79610959, 121.91006755, 108.45782541,\n",
              "        75.59425996,  89.2941224 ,  70.5066046 ,  73.36211163,\n",
              "       108.07508083, 108.31620588, 102.06822517, 114.24393283,\n",
              "       115.83214693, 101.7096495 ,  89.49977749,  86.47627286,\n",
              "        90.26155578, 103.66353442,  80.92133233, 111.84999577,\n",
              "       101.36148702,  82.57293259, 120.4337929 ,  98.59347862,\n",
              "        88.80461352,  88.03025503, 103.04289287, 112.65983072,\n",
              "       140.04799987,  95.56769908, 100.98385113, 110.08828957,\n",
              "       132.02624647, 108.81937913, 102.94435142,  87.29164731,\n",
              "        98.05575114,  97.54175768,  87.25510298, 116.89617909,\n",
              "       123.21391906, 106.15698933, 110.82909418, 105.5955423 ,\n",
              "       101.54947529, 121.02818705,  74.15724017, 111.30601798,\n",
              "       111.69745777, 102.14066837,  91.83966792, 107.59315617,\n",
              "        82.70065624, 123.32592554, 111.70370431,  74.79921746,\n",
              "        82.7823206 , 120.51423708,  85.05520737,  93.01218643,\n",
              "       114.57439499, 128.45478508,  90.30133473,  95.31331438,\n",
              "        87.04149423, 107.87327283, 101.56544387,  83.83581302,\n",
              "        90.39142467,  80.39810138,  76.30424896,  98.84917499,\n",
              "       118.15760014,  97.98920513,  72.26512095, 116.33025813,\n",
              "       102.6972816 , 109.2815277 , 115.7391741 ,  84.73134166,\n",
              "        96.25751466, 118.75111217,  96.24726085, 126.78760054,\n",
              "        95.17272911,  92.12762337,  96.82953486,  90.11085533,\n",
              "       105.27312107, 135.53561918, 105.37793664, 109.95633053,\n",
              "       106.19372463, 122.47625906,  69.15190354, 115.3272479 ,\n",
              "        86.68284494,  95.96496414, 102.6943498 , 115.228351  ,\n",
              "       126.21734127, 102.45669884,  93.31001793, 100.11580997,\n",
              "        82.76736907,  84.65868608, 103.85031548,  92.1935014 ,\n",
              "       112.86313109,  91.39247603,  75.00153904, 101.69773211,\n",
              "       128.5349909 , 106.09986183,  91.59964196,  96.39988795,\n",
              "        88.1749677 , 124.32390546,  92.46588271,  93.51661133,\n",
              "       106.11627125, 101.64254348,  76.50171357,  72.60412248,\n",
              "        93.00521889, 112.47606654,  89.336198  ,  96.38291766,\n",
              "       100.08574465, 112.48382497,  85.29493351,  89.44177344,\n",
              "       105.32669971, 107.65831859,  81.55302451,  90.19769747,\n",
              "        95.88680835, 110.00793876, 113.03476463,  99.12431414,\n",
              "       101.14114218, 102.88905369,  93.60189398, 100.38425751,\n",
              "       124.00764341,  78.40479858, 104.60531311, 111.6234761 ,\n",
              "        84.30653555,  92.98543403,  77.00673244, 110.93427073,\n",
              "        91.55100391, 112.33664307, 121.95077881,  96.68536043,\n",
              "       112.53125327,  88.95883684, 110.37162691,  66.55563678,\n",
              "       101.18191615, 103.99104946,  97.37176073, 104.4758352 ,\n",
              "       121.51654831,  89.11847524,  83.32852703,  96.43041518,\n",
              "        90.40317834, 130.21082585,  84.12116109, 126.17361695,\n",
              "        99.1459004 , 115.17063707,  87.95516026,  68.91687571,\n",
              "        92.93750364, 117.63167656,  98.34670683, 121.93201616,\n",
              "        87.90552749, 114.86589893, 134.63560344,  80.03797587,\n",
              "       102.44096009,  73.65350394,  89.22458613,  89.75808299,\n",
              "       110.7848293 ,  98.35618985,  82.55790644, 102.07506887,\n",
              "        79.28288739,  76.43041737,  98.2957282 , 101.0652192 ,\n",
              "       101.95769695,  87.87413112,  92.28577115,  90.10982388,\n",
              "        96.29037824, 101.92618877,  94.18182562, 126.67236061,\n",
              "       109.73798588,  95.08290456, 112.67276493, 101.14838121,\n",
              "        91.31351414, 107.01668191, 112.01788896, 108.43690785,\n",
              "       116.3682498 , 131.75914427,  80.29327018,  98.4127818 ,\n",
              "        73.45591275,  85.18134684, 117.13283728, 104.42690045,\n",
              "        78.55113011,  98.27144341, 108.78002261,  94.49235266,\n",
              "        95.52660562, 104.24037808, 101.35497306,  95.90359211,\n",
              "       108.63816363, 121.80313871,  82.91729402,  92.74487164,\n",
              "        79.41117477, 107.53040281,  88.85357787,  54.01465472,\n",
              "       118.08639253,  64.34932749,  86.47764712,  99.80409909,\n",
              "        88.85757926,  95.89692048, 122.85739961,  91.86164348,\n",
              "       101.96737426, 123.00203939, 125.00540373,  84.18486184,\n",
              "       106.63005688, 106.14454184,  88.49035062,  94.21812617,\n",
              "        95.97984851, 103.47316907,  98.01527847,  96.22744289,\n",
              "        96.172888  ,  91.58332011, 118.60959571,  89.02307905,\n",
              "        90.03663039,  79.51705579, 102.67394641, 111.4410114 ,\n",
              "        91.43372003, 110.21285307,  90.93602267,  75.01147577,\n",
              "       110.55237088,  91.88437898, 110.78556226, 105.6380747 ,\n",
              "        95.32452566, 124.56388219, 109.96268319,  98.17612734,\n",
              "        82.34344826, 106.93278423, 107.88085427,  96.53713165,\n",
              "       115.90135903, 103.45088468, 100.40688358,  82.69022887,\n",
              "        83.74463167, 106.17255898, 103.39897832,  89.40010714,\n",
              "        97.19724721,  95.9324274 ,  91.68308288, 109.51447384,\n",
              "        88.45199979, 116.24490632,  81.03347842,  92.70537476,\n",
              "        99.62608319, 103.55403163,  96.39595067,  95.3288552 ,\n",
              "        88.68611288,  81.21449382,  92.24467124,  92.10081315,\n",
              "       122.43078516, 107.89390609,  99.07535413,  91.1788003 ,\n",
              "       106.37196518, 105.35554496,  85.97848101,  84.62774998,\n",
              "        72.71214935,  99.76397983, 116.57412215,  94.45476593,\n",
              "       105.99800881, 122.39937627, 102.41695003,  84.60269509,\n",
              "        70.93298234, 107.61704879,  94.97006581, 115.77882767,\n",
              "       112.20668171,  90.86310266,  85.0051893 , 100.80444078,\n",
              "       112.8862246 , 100.12785422,  89.12978671,  95.08117546,\n",
              "        95.16794287,  89.61683267,  88.54220224, 105.08643539,\n",
              "       108.13808258,  75.68560237,  88.79206266,  88.46918643,\n",
              "        86.90820072,  90.98815578,  98.00374793,  99.47963923,\n",
              "       103.32505706,  95.37508712, 118.26501005, 103.25979083,\n",
              "        81.71715251,  88.22114956, 104.5866547 , 101.89428118,\n",
              "       122.65376708,  87.01890455, 134.67312948,  94.43812541,\n",
              "       127.92576851, 110.28021847, 106.46487369,  78.64596486,\n",
              "        99.02066377,  93.58947551, 124.35638976,  94.68020752,\n",
              "       102.28991675,  84.02491014, 116.97073955,  76.42611104,\n",
              "       138.38594336,  98.45688905,  70.2022986 ,  94.33141916,\n",
              "        87.45101304, 105.59719051, 109.16730851, 127.55826067,\n",
              "       113.45912049, 103.49276649, 101.36250061,  93.20657982,\n",
              "        89.3817216 ,  87.48543489, 116.98786622,  93.68842369,\n",
              "        84.92583698, 113.1371479 , 104.74878344,  87.18196423,\n",
              "       118.03379676, 115.19826656, 136.49623492,  99.50663555,\n",
              "       102.39792132, 100.51173987, 110.5926984 ,  99.6653544 ,\n",
              "       112.6386449 , 115.36768994,  88.50141087, 117.15199055,\n",
              "        96.94485347,  91.52206098,  81.62721238, 131.77528737,\n",
              "        95.47608756,  88.02888703,  83.14623217,  87.24288006,\n",
              "       125.01931722,  64.43436141,  95.24624528, 100.11836918,\n",
              "        82.21271561, 120.84745943, 109.52564631, 130.87061072,\n",
              "        84.56299222,  94.54632692,  80.77621782,  90.66652982,\n",
              "       106.21792816,  80.54764231,  88.62851391,  79.34620867])"
            ]
          },
          "metadata": {},
          "execution_count": 4
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "CDF8m3a4IYOC"
      },
      "source": [
        "Compute the **mean**, **median**, and **mode**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ZKbeqxaKIoNs",
        "outputId": "d5c8bbf4-b80f-40b4-8598-c9617cac9751",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "mean = np.mean(samples)\n",
        "median = np.median(samples)\n",
        "mode = stats.mode(samples)\n",
        "print(\"mean:\", mean)\n",
        "print(\"median:\",median)\n",
        "print(\"mode:\",mode)"
      ],
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "mean: 99.92146875909822\n",
            "median: 100.11708957325502\n",
            "mode: ModeResult(mode=array([54.01465472]), count=array([1]))\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "skT8m39XI60w"
      },
      "source": [
        "Compute the **min**, **max**, **Q1**, **Q3**, and **interquartile range**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "VaiDphm8It0O",
        "outputId": "37012c0d-aaae-4154-960a-3ea55c96bc97",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "min = np.min(samples)\n",
        "max =np.max(samples)\n",
        "q1 = np.percentile(samples,25)\n",
        "q3 = np.percentile(samples,75)\n",
        "iqr = q3 - q1\n",
        "iqr_1 = stats.iqr(samples)\n",
        "print(\"max:\",max)\n",
        "print(\"min:\",min)\n",
        "print(\"Q1:\",q1)\n",
        "print(\"Q3:\",q3)\n",
        "print(\"iqr:\",iqr)\n",
        "print(\"iqr_1:\",iqr_1)"
      ],
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "max: 144.25019078349652\n",
            "min: 54.014654720215916\n",
            "Q1: 89.52484403971513\n",
            "Q3: 110.10813628091908\n",
            "iqr: 20.58329224120395\n",
            "iqr_1: 20.58329224120395\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "m53Dv3n5JHQi"
      },
      "source": [
        "Compute the **variance** and **standard deviation**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "6JFaAYdrJbeN",
        "outputId": "229140c2-47ff-47d8-8a04-515afe5df4a0",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "variance = np.var(samples)\n",
        "std_dev = np.std(samples)\n",
        "print(\"var:\",variance)\n",
        "print(\"std:\",std_dev)"
      ],
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "var: 220.30049258590756\n",
            "std: 14.842523120612194\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "5eup4hI1JzqX"
      },
      "source": [
        "Compute the **skewness** and **kurtosis**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "YO3obyDnJ3_D",
        "outputId": "8add0da2-37df-4277-e56c-39ba80bd7e7e",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "skewness = stats.skew(samples)\n",
        "print(\"skewness:\",skewness)\n",
        "kurtosis =stats.kurtosis(samples)\n",
        "print(\"kurtosis:\",kurtosis)"
      ],
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "skewness: -0.0029901545429166974\n",
            "kurtosis: -0.10346368847290321\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "a5UNc8PUKnbU"
      },
      "source": [
        "## NumPy Correlation Calculation"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "cLiqxE1CMNTg"
      },
      "source": [
        "Create an array x of integers between 10 (inclusive) and 20 (exclusive). Use `np.arange()`"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "5LAaQ6w5L-2L",
        "outputId": "5b9f5369-80ca-428f-ab28-722a8ba479c7",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "x = np.arange(10,20)\n",
        "print(x)"
      ],
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[10 11 12 13 14 15 16 17 18 19]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "qyCIaukNMZPf"
      },
      "source": [
        "Then use `np.array()` to create a second array y containing 10 arbitrary integers."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "p27eW__gNMdh",
        "outputId": "decd002e-f0c2-4237-c1d8-c9cab047cfba",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "y = np.random.randint(1,1000,10)\n",
        "print(y)"
      ],
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[152 470 911 610  36 377 476 430 316 359]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Kh_VeKwINSqS"
      },
      "source": [
        "Once you have two arrays of the same length, you can compute the **correlation coefficient** between x and y"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "yrtC6rPkNSDC",
        "outputId": "1d7b6f35-9efb-4faf-e119-d992458414e4",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "r = np.corrcoef(x,y)\n",
        "r"
      ],
      "execution_count": 15,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[ 1.        , -0.12854875],\n",
              "       [-0.12854875,  1.        ]])"
            ]
          },
          "metadata": {},
          "execution_count": 15
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "vXieLjYiNtPi"
      },
      "source": [
        "## Pandas Correlation Calculation"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "z56t0k0qNvkr"
      },
      "source": [
        "Run the code below"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "9AVBMJCyNuwb",
        "outputId": "7bc841a5-0f74-4c94-c769-e06d9394aaa4",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "x = pd.Series(range(10, 20))\n",
        "y = pd.Series([2, 1, 4, 5, 8, 12, 18, 25, 96, 48])\n",
        "print(x)\n",
        "print(y)"
      ],
      "execution_count": 19,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0    10\n",
            "1    11\n",
            "2    12\n",
            "3    13\n",
            "4    14\n",
            "5    15\n",
            "6    16\n",
            "7    17\n",
            "8    18\n",
            "9    19\n",
            "dtype: int64\n",
            "0     2\n",
            "1     1\n",
            "2     4\n",
            "3     5\n",
            "4     8\n",
            "5    12\n",
            "6    18\n",
            "7    25\n",
            "8    96\n",
            "9    48\n",
            "dtype: int64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ZajVXYe2OCih"
      },
      "source": [
        "Call the relevant method  to calculate Pearson's r correlation."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Ak_rkzbLOafj",
        "outputId": "6ddd0d34-3cf8-4d09-9d3a-ca1d218f4448",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "r =x.corr(y)\n",
        "r= y.corr(x)\n",
        "r\n"
      ],
      "execution_count": 23,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.7586402890911869"
            ]
          },
          "metadata": {},
          "execution_count": 23
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "1CygSbnROb9V"
      },
      "source": [
        "OPTIONAL. Call the relevant method to calculate Spearman's rho correlation."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "xp_QkXwmOlYY",
        "outputId": "8d8337f1-f1f9-4856-ce17-047a1f6291a4",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "rho = x.corr(y, method =  \"spearman\")\n",
        "rho"
      ],
      "execution_count": 25,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.9757575757575757"
            ]
          },
          "metadata": {},
          "execution_count": 25
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "rho = x.corr(y, method = \"kendall\")\n",
        "rho"
      ],
      "metadata": {
        "id": "11qkx11SQ5Yg",
        "outputId": "598331dd-33b9-4bd4-e5ff-40be60e48df2",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 27,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.911111111111111"
            ]
          },
          "metadata": {},
          "execution_count": 27
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "we7pg7kdOo7y"
      },
      "source": [
        "## Seaborn Dataset Tips"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "VlzgFKN7OvqX"
      },
      "source": [
        "Import Seaborn Library"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "t-49JRRqO4pw"
      },
      "source": [
        "import seaborn as sns"
      ],
      "execution_count": 28,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "0INVBB4tO4y4"
      },
      "source": [
        "Load \"tips\" dataset from Seaborn"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "kieLvcM1PBv7",
        "outputId": "9b62d3dd-dfb8-4dc2-9285-9d32ae0a6e32",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 423
        }
      },
      "source": [
        "tips = sns.load_dataset(\"tips\")\n",
        "tips"
      ],
      "execution_count": 31,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "\n",
              "  <div id=\"df-29b25867-9cdd-4ea1-b7d7-f035658a90d2\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>total_bill</th>\n",
              "      <th>tip</th>\n",
              "      <th>sex</th>\n",
              "      <th>smoker</th>\n",
              "      <th>day</th>\n",
              "      <th>time</th>\n",
              "      <th>size</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>16.99</td>\n",
              "      <td>1.01</td>\n",
              "      <td>Female</td>\n",
              "      <td>No</td>\n",
              "      <td>Sun</td>\n",
              "      <td>Dinner</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>10.34</td>\n",
              "      <td>1.66</td>\n",
              "      <td>Male</td>\n",
              "      <td>No</td>\n",
              "      <td>Sun</td>\n",
              "      <td>Dinner</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>21.01</td>\n",
              "      <td>3.50</td>\n",
              "      <td>Male</td>\n",
              "      <td>No</td>\n",
              "      <td>Sun</td>\n",
              "      <td>Dinner</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>23.68</td>\n",
              "      <td>3.31</td>\n",
              "      <td>Male</td>\n",
              "      <td>No</td>\n",
              "      <td>Sun</td>\n",
              "      <td>Dinner</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>24.59</td>\n",
              "      <td>3.61</td>\n",
              "      <td>Female</td>\n",
              "      <td>No</td>\n",
              "      <td>Sun</td>\n",
              "      <td>Dinner</td>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>239</th>\n",
              "      <td>29.03</td>\n",
              "      <td>5.92</td>\n",
              "      <td>Male</td>\n",
              "      <td>No</td>\n",
              "      <td>Sat</td>\n",
              "      <td>Dinner</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>240</th>\n",
              "      <td>27.18</td>\n",
              "      <td>2.00</td>\n",
              "      <td>Female</td>\n",
              "      <td>Yes</td>\n",
              "      <td>Sat</td>\n",
              "      <td>Dinner</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>241</th>\n",
              "      <td>22.67</td>\n",
              "      <td>2.00</td>\n",
              "      <td>Male</td>\n",
              "      <td>Yes</td>\n",
              "      <td>Sat</td>\n",
              "      <td>Dinner</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>242</th>\n",
              "      <td>17.82</td>\n",
              "      <td>1.75</td>\n",
              "      <td>Male</td>\n",
              "      <td>No</td>\n",
              "      <td>Sat</td>\n",
              "      <td>Dinner</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>243</th>\n",
              "      <td>18.78</td>\n",
              "      <td>3.00</td>\n",
              "      <td>Female</td>\n",
              "      <td>No</td>\n",
              "      <td>Thur</td>\n",
              "      <td>Dinner</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>244 rows Ã 7 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-29b25867-9cdd-4ea1-b7d7-f035658a90d2')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-29b25867-9cdd-4ea1-b7d7-f035658a90d2 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-29b25867-9cdd-4ea1-b7d7-f035658a90d2');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ],
            "text/plain": [
              "     total_bill   tip     sex smoker   day    time  size\n",
              "0         16.99  1.01  Female     No   Sun  Dinner     2\n",
              "1         10.34  1.66    Male     No   Sun  Dinner     3\n",
              "2         21.01  3.50    Male     No   Sun  Dinner     3\n",
              "3         23.68  3.31    Male     No   Sun  Dinner     2\n",
              "4         24.59  3.61  Female     No   Sun  Dinner     4\n",
              "..          ...   ...     ...    ...   ...     ...   ...\n",
              "239       29.03  5.92    Male     No   Sat  Dinner     3\n",
              "240       27.18  2.00  Female    Yes   Sat  Dinner     2\n",
              "241       22.67  2.00    Male    Yes   Sat  Dinner     2\n",
              "242       17.82  1.75    Male     No   Sat  Dinner     2\n",
              "243       18.78  3.00  Female     No  Thur  Dinner     2\n",
              "\n",
              "[244 rows x 7 columns]"
            ]
          },
          "metadata": {},
          "execution_count": 31
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "o2ISqVQrPh5S"
      },
      "source": [
        "Generate descriptive statistics include those that summarize the central tendency, dispersion"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "FyFvmdbJPVg6",
        "outputId": "d2f2c868-a219-4c72-d6f5-ffcaa1b55831",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 300
        }
      },
      "source": [
        "tips.describe()"
      ],
      "execution_count": 32,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "\n",
              "  <div id=\"df-5d800135-9950-44da-85f6-bc6a7e1701f3\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>total_bill</th>\n",
              "      <th>tip</th>\n",
              "      <th>size</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>244.000000</td>\n",
              "      <td>244.000000</td>\n",
              "      <td>244.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>19.785943</td>\n",
              "      <td>2.998279</td>\n",
              "      <td>2.569672</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>8.902412</td>\n",
              "      <td>1.383638</td>\n",
              "      <td>0.951100</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>3.070000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>13.347500</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>2.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>17.795000</td>\n",
              "      <td>2.900000</td>\n",
              "      <td>2.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>24.127500</td>\n",
              "      <td>3.562500</td>\n",
              "      <td>3.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>50.810000</td>\n",
              "      <td>10.000000</td>\n",
              "      <td>6.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-5d800135-9950-44da-85f6-bc6a7e1701f3')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-5d800135-9950-44da-85f6-bc6a7e1701f3 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-5d800135-9950-44da-85f6-bc6a7e1701f3');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ],
            "text/plain": [
              "       total_bill         tip        size\n",
              "count  244.000000  244.000000  244.000000\n",
              "mean    19.785943    2.998279    2.569672\n",
              "std      8.902412    1.383638    0.951100\n",
              "min      3.070000    1.000000    1.000000\n",
              "25%     13.347500    2.000000    2.000000\n",
              "50%     17.795000    2.900000    2.000000\n",
              "75%     24.127500    3.562500    3.000000\n",
              "max     50.810000   10.000000    6.000000"
            ]
          },
          "metadata": {},
          "execution_count": 32
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "3yCRK4VJPzRo"
      },
      "source": [
        "Call the relevant method to calculate pairwise Pearson's r correlation of columns"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "qwvGzDU8PGnM",
        "outputId": "c66d78ef-f46b-48ae-a95c-1d741f4b39f6",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 143
        }
      },
      "source": [
        "tips.corr(\"pearson\")"
      ],
      "execution_count": 33,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "\n",
              "  <div id=\"df-03562050-75fe-43e9-ad0d-a84d718f122a\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>total_bill</th>\n",
              "      <th>tip</th>\n",
              "      <th>size</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>total_bill</th>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.675734</td>\n",
              "      <td>0.598315</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>tip</th>\n",
              "      <td>0.675734</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.489299</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>size</th>\n",
              "      <td>0.598315</td>\n",
              "      <td>0.489299</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-03562050-75fe-43e9-ad0d-a84d718f122a')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-03562050-75fe-43e9-ad0d-a84d718f122a button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-03562050-75fe-43e9-ad0d-a84d718f122a');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ],
            "text/plain": [
              "            total_bill       tip      size\n",
              "total_bill    1.000000  0.675734  0.598315\n",
              "tip           0.675734  1.000000  0.489299\n",
              "size          0.598315  0.489299  1.000000"
            ]
          },
          "metadata": {},
          "execution_count": 33
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "sns.set()\n",
        "sns.pairplot(tips,height=3)\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "Sk-wrk91RgV1",
        "outputId": "3b0d14b2-0518-421b-c46a-581c2ab13135",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 654
        }
      },
      "execution_count": 34,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 648x648 with 12 Axes>"
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.figure(figsize=(3,3))\n",
        "sns.heatmap(tips.corr(),annot=True,cmap=\"Wistia\")\n",
        "plt.ylim(3,0 )"
      ],
      "metadata": {
        "id": "v3qG-xtQSLAK",
        "outputId": "277c5af8-0d9a-4330-f922-dcca698dc99c",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 235
        }
      },
      "execution_count": 39,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(3.0, 0.0)"
            ]
          },
          "metadata": {},
          "execution_count": 39
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 216x216 with 2 Axes>"
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        ""
      ],
      "metadata": {
        "id": "P6uxVzORS0u2"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}